{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\React_AXA\\\\test-theme\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(logout),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(register),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(forgetPassword),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoginUser),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogoutUser),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRegisterUser),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchForgetPassword),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(authSaga);\n\nimport { Cookies } from \"react-cookie\";\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport { LOGIN_USER, LOGOUT_USER, REGISTER_USER, FORGET_PASSWORD } from '../../constants/actionTypes';\nimport { loginUserSuccess, loginUserFailed, registerUserSuccess, registerUserFailed, forgetPasswordSuccess, forgetPasswordFailed } from './actions';\n/**\r\n * Fetch data from given url\r\n * @param {*} url \r\n * @param {*} options \r\n */\n\nvar fetchJSON = function fetchJSON(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return fetch(url, options).then(function (response) {\n    if (!response.status === 200) {\n      throw response.json();\n    }\n\n    return response.json();\n  }).then(function (json) {\n    return json;\n  }).catch(function (error) {\n    throw error;\n  });\n};\n/**\r\n * Sets the session\r\n * @param {*} user \r\n */\n\n\nvar setSession = function setSession(user) {\n  var cookies = new Cookies();\n  if (user) cookies.set(\"user\", JSON.stringify(user), {\n    path: \"/\"\n  });else cookies.remove(\"user\");\n};\n/**\r\n * Login the user\r\n * @param {*} payload - username and password \r\n */\n\n\nfunction login(_ref) {\n  var _ref$payload, username, password, options, response, message;\n\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _ref$payload = _ref.payload, username = _ref$payload.username, password = _ref$payload.password;\n          // const options = {\n          //     body: JSON.stringify({ username, password }),\n          //     method: 'POST',\n          //     headers: { 'Content-Type': 'application/json' }\n          // };\n          options = {\n            body: JSON.stringify({\n              scope: 'promotion',\n              grant_type: 'client_credentials',\n              client_id: 'promotion.dev',\n              client_secret: 'dM7CBvnrgbMKQUPasgRZLTzsG61PMJT9LHQ5wZ4v'\n            }),\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          };\n          _context.prev = 2;\n          _context.next = 5;\n          return call(fetchJSON, '/identityserver/connect/token', options);\n\n        case 5:\n          response = _context.sent;\n          setSession(response);\n          _context.next = 9;\n          return put(loginUserSuccess(response));\n\n        case 9:\n          _context.next = 24;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](2);\n          _context.t1 = _context.t0.status;\n          _context.next = _context.t1 === 500 ? 16 : _context.t1 === 401 ? 18 : 20;\n          break;\n\n        case 16:\n          message = 'Internal Server Error';\n          return _context.abrupt(\"break\", 21);\n\n        case 18:\n          message = 'Invalid credentials';\n          return _context.abrupt(\"break\", 21);\n\n        case 20:\n          message = _context.t0;\n\n        case 21:\n          _context.next = 23;\n          return put(loginUserFailed(message));\n\n        case 23:\n          setSession(null);\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[2, 11]]);\n}\n/**\r\n * Logout the user\r\n * @param {*} param0 \r\n */\n\n\nfunction logout(_ref2) {\n  var history;\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          history = _ref2.payload.history;\n          _context2.prev = 1;\n          setSession(null);\n          _context2.next = 5;\n          return call(function () {\n            history.push(\"/login\");\n          });\n\n        case 5:\n          _context2.next = 9;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](1);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 7]]);\n}\n/**\r\n * Register the user\r\n */\n\n\nfunction register(_ref3) {\n  var _ref3$payload, fullname, email, password, options, response, message;\n\n  return _regeneratorRuntime.wrap(function register$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _ref3$payload = _ref3.payload, fullname = _ref3$payload.fullname, email = _ref3$payload.email, password = _ref3$payload.password;\n          options = {\n            body: JSON.stringify({\n              fullname: fullname,\n              email: email,\n              password: password\n            }),\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          };\n          _context3.prev = 2;\n          _context3.next = 5;\n          return call(fetchJSON, '/users/register', options);\n\n        case 5:\n          response = _context3.sent;\n          _context3.next = 8;\n          return put(registerUserSuccess(response));\n\n        case 8:\n          _context3.next = 22;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](2);\n          _context3.t1 = _context3.t0.status;\n          _context3.next = _context3.t1 === 500 ? 15 : _context3.t1 === 401 ? 17 : 19;\n          break;\n\n        case 15:\n          message = 'Internal Server Error';\n          return _context3.abrupt(\"break\", 20);\n\n        case 17:\n          message = 'Invalid credentials';\n          return _context3.abrupt(\"break\", 20);\n\n        case 19:\n          message = _context3.t0;\n\n        case 20:\n          _context3.next = 22;\n          return put(registerUserFailed(message));\n\n        case 22:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[2, 10]]);\n}\n/**\r\n * forget password\r\n */\n\n\nfunction forgetPassword(_ref4) {\n  var username, options, response, message;\n  return _regeneratorRuntime.wrap(function forgetPassword$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          username = _ref4.payload.username;\n          options = {\n            body: JSON.stringify({\n              username: username\n            }),\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          };\n          _context4.prev = 2;\n          _context4.next = 5;\n          return call(fetchJSON, '/users/password-reset', options);\n\n        case 5:\n          response = _context4.sent;\n          _context4.next = 8;\n          return put(forgetPasswordSuccess(response.message));\n\n        case 8:\n          _context4.next = 22;\n          break;\n\n        case 10:\n          _context4.prev = 10;\n          _context4.t0 = _context4[\"catch\"](2);\n          _context4.t1 = _context4.t0.status;\n          _context4.next = _context4.t1 === 500 ? 15 : _context4.t1 === 401 ? 17 : 19;\n          break;\n\n        case 15:\n          message = 'Internal Server Error';\n          return _context4.abrupt(\"break\", 20);\n\n        case 17:\n          message = 'Invalid credentials';\n          return _context4.abrupt(\"break\", 20);\n\n        case 19:\n          message = _context4.t0;\n\n        case 20:\n          _context4.next = 22;\n          return put(forgetPasswordFailed(message));\n\n        case 22:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[2, 10]]);\n}\n\nexport function watchLoginUser() {\n  return _regeneratorRuntime.wrap(function watchLoginUser$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeEvery(LOGIN_USER, login);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function watchLogoutUser() {\n  return _regeneratorRuntime.wrap(function watchLogoutUser$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOGOUT_USER, logout);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function watchRegisterUser() {\n  return _regeneratorRuntime.wrap(function watchRegisterUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(REGISTER_USER, register);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\nexport function watchForgetPassword() {\n  return _regeneratorRuntime.wrap(function watchForgetPassword$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeEvery(FORGET_PASSWORD, forgetPassword);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction authSaga() {\n  return _regeneratorRuntime.wrap(function authSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchLoginUser), fork(watchLogoutUser), fork(watchRegisterUser), fork(watchForgetPassword)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nexport default authSaga;","map":{"version":3,"sources":["D:\\React_AXA\\test-theme\\src\\redux\\auth\\saga.js"],"names":["login","logout","register","forgetPassword","watchLoginUser","watchLogoutUser","watchRegisterUser","watchForgetPassword","authSaga","Cookies","all","call","fork","put","takeEvery","LOGIN_USER","LOGOUT_USER","REGISTER_USER","FORGET_PASSWORD","loginUserSuccess","loginUserFailed","registerUserSuccess","registerUserFailed","forgetPasswordSuccess","forgetPasswordFailed","fetchJSON","url","options","fetch","then","response","status","json","catch","error","setSession","user","cookies","set","JSON","stringify","path","remove","payload","username","password","body","scope","grant_type","client_id","client_secret","method","headers","message","history","push","fullname","email"],"mappings":"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","sourcesContent":["// @flow\r\nimport { Cookies } from \"react-cookie\";\r\nimport { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport {\r\n    LOGIN_USER,\r\n    LOGOUT_USER,\r\n    REGISTER_USER,\r\n    FORGET_PASSWORD\r\n} from '../../constants/actionTypes';\r\n\r\n\r\nimport {\r\n    loginUserSuccess,\r\n    loginUserFailed,\r\n    registerUserSuccess,\r\n    registerUserFailed,\r\n    forgetPasswordSuccess,\r\n    forgetPasswordFailed\r\n} from './actions';\r\n\r\n\r\n/**\r\n * Fetch data from given url\r\n * @param {*} url \r\n * @param {*} options \r\n */\r\nconst fetchJSON = (url, options = {}) => {\r\n    return fetch(url, options)\r\n        .then(response => {\r\n            if (!response.status === 200) {\r\n                throw response.json();\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(json => {\r\n            return json;\r\n        })\r\n        .catch(error => { throw error });\r\n}\r\n\r\n\r\n/**\r\n * Sets the session\r\n * @param {*} user \r\n */\r\nconst setSession = (user) => {\r\n    let cookies = new Cookies();\r\n    if (user)\r\n        cookies.set(\"user\", JSON.stringify(user), { path: \"/\" });\r\n    else\r\n        cookies.remove(\"user\");\r\n};\r\n/**\r\n * Login the user\r\n * @param {*} payload - username and password \r\n */\r\nfunction* login({ payload: { username, password } }) {\r\n    // const options = {\r\n    //     body: JSON.stringify({ username, password }),\r\n    //     method: 'POST',\r\n    //     headers: { 'Content-Type': 'application/json' }\r\n    // };\r\n    const options = {\r\n        body: JSON.stringify({ scope:'promotion',\r\n            grant_type:'client_credentials',\r\n            client_id:'promotion.dev',\r\n            client_secret:'dM7CBvnrgbMKQUPasgRZLTzsG61PMJT9LHQ5wZ4v' }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n    };\r\n\r\n    try {\r\n        // const response = yield call(fetchJSON, '/users/authenticate', options);\r\n        const response = yield call(fetchJSON, '/identityserver/connect/token', options);\r\n        setSession(response);\r\n        yield put(loginUserSuccess(response));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500: message = 'Internal Server Error'; break;\r\n            case 401: message = 'Invalid credentials'; break;\r\n            default: message = error;\r\n        }\r\n        yield put(loginUserFailed(message));\r\n        setSession(null);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Logout the user\r\n * @param {*} param0 \r\n */\r\nfunction* logout({ payload: { history } }) {\r\n    try {\r\n        setSession(null);\r\n        yield call(() => {\r\n            history.push(\"/login\");\r\n        });\r\n    } catch (error) { }\r\n}\r\n\r\n/**\r\n * Register the user\r\n */\r\nfunction* register({ payload: { fullname, email, password } }) {\r\n    const options = {\r\n        body: JSON.stringify({ fullname, email, password }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/register', options);\r\n        yield put(registerUserSuccess(response));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500: message = 'Internal Server Error'; break;\r\n            case 401: message = 'Invalid credentials'; break;\r\n            default: message = error;\r\n        }\r\n        yield put(registerUserFailed(message));\r\n    }\r\n}\r\n\r\n/**\r\n * forget password\r\n */\r\nfunction* forgetPassword({ payload: { username } }) {\r\n    const options = {\r\n        body: JSON.stringify({ username }),\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' }\r\n    };\r\n\r\n    try {\r\n        const response = yield call(fetchJSON, '/users/password-reset', options);\r\n        yield put(forgetPasswordSuccess(response.message));\r\n    } catch (error) {\r\n        let message;\r\n        switch (error.status) {\r\n            case 500: message = 'Internal Server Error'; break;\r\n            case 401: message = 'Invalid credentials'; break;\r\n            default: message = error;\r\n        }\r\n        yield put(forgetPasswordFailed(message));\r\n    }\r\n}\r\n\r\n\r\nexport function* watchLoginUser():any {\r\n    yield takeEvery(LOGIN_USER, login);\r\n}\r\n\r\nexport function* watchLogoutUser():any {\r\n    yield takeEvery(LOGOUT_USER, logout);\r\n}\r\n\r\nexport function* watchRegisterUser():any {\r\n    yield takeEvery(REGISTER_USER, register);\r\n}\r\n\r\nexport function* watchForgetPassword():any {\r\n    yield takeEvery(FORGET_PASSWORD, forgetPassword);\r\n}\r\n\r\nfunction* authSaga():any {\r\n    yield all([\r\n        fork(watchLoginUser),\r\n        fork(watchLogoutUser),\r\n        fork(watchRegisterUser),\r\n        fork(watchForgetPassword),\r\n    ]);\r\n}\r\n\r\nexport default authSaga;"]},"metadata":{},"sourceType":"module"}