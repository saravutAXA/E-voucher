{"ast":null,"code":"import _objectWithoutProperties from \"D:\\\\React_AXA\\\\test-theme\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"D:\\\\React_AXA\\\\test-theme\\\\src\\\\routes.js\";\nimport React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Route } from 'react-router-dom';\nimport { isUserAuthenticated, getLoggedInUser } from './helpers/authUtils'; // lazy load all the views\n\nvar Dashboard = React.lazy(function () {\n  return import('./pages/Dashboard');\n});\nvar GenerateEVoucher = React.lazy(function () {\n  return import('./pages/GenerateEVoucher');\n}); // auth\n\nvar Login = React.lazy(function () {\n  return import('./pages/auth/Login');\n});\nvar Logout = React.lazy(function () {\n  return import('./pages/auth/Logout');\n});\nvar ForgetPassword = React.lazy(function () {\n  return import('./pages/account/ForgetPassword');\n});\nvar Register = React.lazy(function () {\n  return import('./pages/account/Register');\n});\nvar ConfirmAccount = React.lazy(function () {\n  return import('./pages/account/Confirm');\n}); // handle auth and authorization\n\nvar PrivateRoute = function PrivateRoute(_ref) {\n  var Component = _ref.component,\n      roles = _ref.roles,\n      rest = _objectWithoutProperties(_ref, [\"component\", \"roles\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: function render(props) {\n      var isAuthTokenValid = isUserAuthenticated();\n\n      if (!isAuthTokenValid) {\n        // not logged in so redirect to login page with the return url\n        return React.createElement(Redirect, {\n          to: {\n            pathname: '/login',\n            state: {\n              from: props.location\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        });\n      }\n\n      var loggedInUser = getLoggedInUser(); // check if route is restricted by role\n\n      if (roles && roles.indexOf(loggedInUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return React.createElement(Redirect, {\n          to: {\n            pathname: '/'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        });\n      } // authorised so return component\n\n\n      return React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }));\n};\n\nvar routes = [// auth and account\n{\n  path: '/login',\n  name: 'Login',\n  component: Login,\n  route: Route\n}, {\n  path: '/logout',\n  name: 'Logout',\n  component: Logout,\n  route: Route\n}, {\n  path: '/forget-password',\n  name: 'Forget Password',\n  component: ForgetPassword,\n  route: Route\n}, {\n  path: '/register',\n  name: 'Register',\n  component: Register,\n  route: Route\n}, {\n  path: '/confirm',\n  name: 'Confirm',\n  component: ConfirmAccount,\n  route: Route\n}, // other pages\n{\n  path: '/dashboard',\n  name: 'Dashboard',\n  component: Dashboard,\n  route: PrivateRoute,\n  roles: ['Admin'],\n  title: 'Dashboard'\n}, {\n  path: '/generate_e-voucher',\n  name: 'Generate E-Voucher',\n  component: GenerateEVoucher,\n  route: PrivateRoute,\n  roles: ['Admin'],\n  title: 'Generate E-Voucher'\n}, {\n  path: \"/\",\n  exact: true,\n  component: function component() {\n    return React.createElement(Redirect, {\n      to: \"/dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  },\n  route: PrivateRoute\n}];\nexport { routes, PrivateRoute };","map":{"version":3,"sources":["D:\\React_AXA\\test-theme\\src\\routes.js"],"names":["React","Redirect","Route","isUserAuthenticated","getLoggedInUser","Dashboard","lazy","GenerateEVoucher","Login","Logout","ForgetPassword","Register","ConfirmAccount","PrivateRoute","Component","component","roles","rest","props","isAuthTokenValid","pathname","state","from","location","loggedInUser","indexOf","role","routes","path","name","route","title","exact"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport { Route } from 'react-router-dom';\n\nimport { isUserAuthenticated, getLoggedInUser } from './helpers/authUtils';\n\n// lazy load all the views\nconst Dashboard = React.lazy(() => import('./pages/Dashboard'));\nconst GenerateEVoucher = React.lazy(() => import('./pages/GenerateEVoucher'));\n\n// auth\nconst Login = React.lazy(() => import('./pages/auth/Login'));\nconst Logout = React.lazy(() => import('./pages/auth/Logout'));\nconst ForgetPassword = React.lazy(() => import('./pages/account/ForgetPassword'));\nconst Register = React.lazy(() => import('./pages/account/Register'));\nconst ConfirmAccount = React.lazy(() => import('./pages/account/Confirm'));\n\n// handle auth and authorization\n\nconst PrivateRoute = ({ component: Component, roles, ...rest }) => (\n  <Route {...rest} render={props => {\n    const isAuthTokenValid = isUserAuthenticated();\n    if (!isAuthTokenValid) {\n      // not logged in so redirect to login page with the return url\n      return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n    }\n\n    const loggedInUser = getLoggedInUser();\n    // check if route is restricted by role\n    if (roles && roles.indexOf(loggedInUser.role) === -1) {\n      // role not authorised so redirect to home page\n      return <Redirect to={{ pathname: '/' }} />\n    }\n\n    // authorised so return component\n    return <Component {...props} />\n  }} />\n)\n\nconst routes = [\n  // auth and account\n  { path: '/login', name: 'Login', component: Login, route: Route },\n  { path: '/logout', name: 'Logout', component: Logout, route: Route },\n  { path: '/forget-password', name: 'Forget Password', component: ForgetPassword, route: Route },\n  { path: '/register', name: 'Register', component: Register, route: Route },\n  { path: '/confirm', name: 'Confirm', component: ConfirmAccount, route: Route },\n\n  // other pages\n  { path: '/dashboard', name: 'Dashboard', component: Dashboard, route: PrivateRoute, roles: ['Admin'], title: 'Dashboard' },\n  { path: '/generate_e-voucher', name: 'Generate E-Voucher', component: GenerateEVoucher, route: PrivateRoute, roles: ['Admin'], title: 'Generate E-Voucher' },\n  {\n    path: \"/\",\n    exact: true,\n    component: () => <Redirect to=\"/dashboard\" />,\n    route: PrivateRoute\n  },\n  \n]\n\nexport { routes, PrivateRoute };"]},"metadata":{},"sourceType":"module"}