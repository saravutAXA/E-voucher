{"ast":null,"code":"import axios from 'axios';\nexport function configureFakeBackend() {\n  var users = [{\n    id: 1,\n    username: 'test',\n    password: 'test',\n    firstName: 'Test',\n    lastName: 'User',\n    role: 'Admin'\n  }];\n  var realFetch = window.fetch;\n  var accesstoken = [];\n\n  window.fetch = function (url, opts) {\n    return new Promise(function (resolve, reject) {\n      // wrap in timeout to simulate server api call\n      setTimeout(function () {\n        // authenticate\n        if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n          // get parameters from post request\n          var params = JSON.parse(opts.body); // const response = axios.post(`http://10.16.201.17/identityserver/connect/token`, { params });\n          // console.log(response);\n          // console.log(response.data);\n          // fetch('http://10.16.201.17/identityserver/connect/token', opts)\n          // .then(response => response.json())\n          // .then(data => console.log(data))\n          // find if any user matches login credentials\n\n          var filteredUsers = users.filter(function (user) {\n            return user.username === params.username && user.password === params.password;\n          });\n\n          if (filteredUsers.length) {\n            // if login details are valid return user details and fake jwt token\n            var user = filteredUsers[0];\n            var responseJson = {\n              id: user.id,\n              username: user.username,\n              firstName: user.firstName,\n              lastName: user.lastName,\n              role: \"Admin\",\n              token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n            };\n            resolve({\n              ok: true,\n              json: function json() {\n                return responseJson;\n              }\n            });\n          } else {\n            // else return error\n            reject('Username or password is incorrect');\n          }\n\n          return;\n        } // register\n\n\n        if (url.endsWith('/users/register') && opts.method === 'POST') {\n          // get parameters from post request\n          var _params = JSON.parse(opts.body); // add new users\n\n\n          var _params$fullname$spli = _params.fullname.split(\" \"),\n              firstName = _params$fullname$spli.firstName,\n              lastName = _params$fullname$spli.lastName;\n\n          var newUser = {\n            id: users.length + 1,\n            username: firstName,\n            password: _params.password,\n            firstName: firstName,\n            lastName: lastName,\n            role: 'Admin'\n          };\n          users.push({\n            newUser: newUser\n          });\n          var _responseJson = {\n            id: newUser.id,\n            username: newUser.username,\n            firstName: newUser.firstName,\n            lastName: newUser.lastName,\n            role: newUser.role,\n            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n          };\n          resolve({\n            ok: true,\n            json: function json() {\n              return _responseJson;\n            }\n          });\n          return;\n        } // forget password\n\n\n        if (url.endsWith('/users/password-reset') && opts.method === 'POST') {\n          // get parameters from post request\n          var _params2 = JSON.parse(opts.body); // find if any user matches login credentials\n\n\n          var _filteredUsers = users.filter(function (user) {\n            return user.username === _params2.username;\n          });\n\n          if (_filteredUsers.length) {\n            var _responseJson2 = {\n              message: \"We've sent you a link to reset password to your registered email.\"\n            };\n            resolve({\n              ok: true,\n              json: function json() {\n                return _responseJson2;\n              }\n            });\n          } else {\n            // else return error\n            reject('Sorry, we could not find any registered user with entered username');\n          }\n\n          return;\n        } // get users\n\n\n        if (url.endsWith('/users') && opts.method === 'GET') {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          if (opts.headers && opts.headers.Authorization === 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4') {\n            resolve({\n              ok: true,\n              json: function json() {\n                return users;\n              }\n            });\n          } else {\n            // return 401 not authorised if token is null or invalid\n            reject('Unauthorised');\n          }\n\n          return;\n        } // get users\n\n\n        if (url.endsWith('/identityserver/connect/token') && opts.method === 'POST') {\n          // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n          // if (opts.headers && opts.headers.Authorization === 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4') {\n          //     resolve({ ok: true, json: () => \"users\" });\n          // } else {\n          //     // return 401 not authorised if token is null or invalid\n          //     reject('Unauthorised');\n          // }\n          var _params3 = JSON.parse(opts.body);\n\n          axios.post(url, {\n            scope: _params3.SCOPE,\n            grant_type: _params3.GRANT_TYPE,\n            client_id: _params3.CLIENT_ID,\n            client_secret: _params3.CLIENT_SECRET\n          }).then(function (response) {\n            console.log(response);\n          }).catch(function (error) {\n            console.log(error);\n          });\n          return;\n        } // pass through any requests not handled above\n\n\n        realFetch(url, opts).then(function (response) {\n          return resolve(response);\n        });\n      }, 500);\n    });\n  };\n}","map":{"version":3,"sources":["D:\\React_AXA\\test-theme\\src\\helpers\\fake-backend.js"],"names":["axios","configureFakeBackend","users","id","username","password","firstName","lastName","role","realFetch","window","fetch","accesstoken","url","opts","Promise","resolve","reject","setTimeout","endsWith","method","params","JSON","parse","body","filteredUsers","filter","user","length","responseJson","token","ok","json","fullname","split","newUser","push","message","headers","Authorization","post","scope","SCOPE","grant_type","GRANT_TYPE","client_id","CLIENT_ID","client_secret","CLIENT_SECRET","then","response","console","log","catch","error"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport function configureFakeBackend() {\n    let users = [{ id: 1, username: 'test', password: 'test', firstName: 'Test', lastName: 'User', role: 'Admin' }];\n    let realFetch = window.fetch;\n    let accesstoken = [];\n    window.fetch = function (url, opts) {\n        return new Promise((resolve, reject) => {\n            // wrap in timeout to simulate server api call\n            setTimeout(() => {\n\n                // authenticate\n                \n                if (url.endsWith('/users/authenticate') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // const response = axios.post(`http://10.16.201.17/identityserver/connect/token`, { params });\n                    // console.log(response);\n                    // console.log(response.data);\n\n                    // fetch('http://10.16.201.17/identityserver/connect/token', opts)\n                    // .then(response => response.json())\n                    // .then(data => console.log(data))\n\n\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username && user.password === params.password;\n                    });\n\n                    if (filteredUsers.length) {\n                        // if login details are valid return user details and fake jwt token\n                        let user = filteredUsers[0];\n                        let responseJson = {\n                            id: user.id,\n                            username: user.username,\n                            firstName: user.firstName,\n                            lastName: user.lastName,\n                            role: \"Admin\",\n                            token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Username or password is incorrect');\n                    }\n                    return;\n                }\n\n                // register\n                if (url.endsWith('/users/register') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // add new users\n                    let { firstName, lastName } = params.fullname.split(\" \");\n                    let newUser = { id: users.length + 1, username: firstName, password: params.password, firstName: firstName, lastName: lastName, role: 'Admin' }\n                    users.push({ newUser })\n\n                    let responseJson = {\n                        id: newUser.id,\n                        username: newUser.username,\n                        firstName: newUser.firstName,\n                        lastName: newUser.lastName,\n                        role: newUser.role,\n                        token: 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4'\n                    };\n                    resolve({ ok: true, json: () => responseJson });\n                    return;\n                }\n\n                // forget password\n                if (url.endsWith('/users/password-reset') && opts.method === 'POST') {\n                    // get parameters from post request\n                    let params = JSON.parse(opts.body);\n\n                    // find if any user matches login credentials\n                    let filteredUsers = users.filter(user => {\n                        return user.username === params.username;\n                    });\n\n                    if (filteredUsers.length) {\n                        let responseJson = {\n                            message: \"We've sent you a link to reset password to your registered email.\"\n                        };\n                        resolve({ ok: true, json: () => responseJson });\n                    } else {\n                        // else return error\n                        reject('Sorry, we could not find any registered user with entered username');\n                    }\n                    return;\n                }\n\n                // get users\n                if (url.endsWith('/users') && opts.method === 'GET') {\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n                    if (opts.headers && opts.headers.Authorization === 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4') {\n                        resolve({ ok: true, json: () => users });\n                    } else {\n                        // return 401 not authorised if token is null or invalid\n                        reject('Unauthorised');\n                    }\n\n                    return;\n                }\n\n                // get users\n                if (url.endsWith('/identityserver/connect/token') && opts.method === 'POST') {\n                    // check for fake auth token in header and return users if valid, this security is implemented server side in a real application\n                    // if (opts.headers && opts.headers.Authorization === 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJDb2RlcnRoZW1lIiwiaWF0IjoxNTU1NjgyNTc1LCJleHAiOjE1ODcyMTg1NzUsImF1ZCI6ImNvZGVydGhlbWVzLmNvbSIsInN1YiI6InRlc3QiLCJmaXJzdG5hbWUiOiJIeXBlciIsImxhc3RuYW1lIjoiVGVzdCIsIkVtYWlsIjoidGVzdEBoeXBlci5jb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4ifQ.8qHJDbs5nw4FBTr3F8Xc1NJYOMSJmGnRma7pji0YwB4') {\n                    //     resolve({ ok: true, json: () => \"users\" });\n                    // } else {\n                    //     // return 401 not authorised if token is null or invalid\n                    //     reject('Unauthorised');\n                    // }\n                    \n                    let params = JSON.parse(opts.body);\n                    axios.post(url, {\n                        scope: params.SCOPE,\n                        grant_type: params.GRANT_TYPE,\n                        client_id: params.CLIENT_ID,\n                        client_secret: params.CLIENT_SECRET\n                    })\n                    .then(function (response) {\n                    console.log(response);\n                    })\n                    .catch(function (error) {\n                    console.log(error);\n                    });\n\n\n                    return;\n                }\n\n                // pass through any requests not handled above\n                realFetch(url, opts).then(response => resolve(response));\n\n            }, 500);\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}